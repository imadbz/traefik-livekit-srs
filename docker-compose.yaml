version: "3.8"

volumes:
  cache:
    driver: local
  db_data:
    driver: local

networks:
  web:
    external: true
  internal:
    external: false

services:
  traefik:
    image: traefik:v2.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/traefik/traefik.toml:/traefik.toml
      - ${PWD}/traefik/traefik_dynamic.toml:/traefik_dynamic.toml
      - ${PWD}/traefik/acme.json:/acme.json
    ports:
      - "80:80"
      - "443:443"
    networks:
      - internal
      - web

  livekit:
    image: livekit/livekit-server
    labels:
      - traefik.http.routers.livekit.rule=Host(`lv.flypov.com`)
      - traefik.http.routers.livekit.tls=true
      - traefik.http.routers.livekit.tls.certresolver=lets-encrypt
      - traefik.port=7880
    command: --config /livekit.yaml --node-ip 45.32.102.73
    volumes:
      - ${PWD}/livekit/livekit.yaml:/livekit.yaml
    ports:
      - "7880"
      - "7881:7881"
      - "7882:7882/udp"
    networks:
      - web
      - internal
    depends_on:
      - redis
  
  redis:
    image: redis:6.2-alpine
    labels:
      - traefik.enable=false
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data
    ports:
      - "6379"
    networks:
      - internal

  srs:
    image: ossrs/srs:4
    labels: 
      - traefik.http.routers.srs.rule=Host(`srs.flypov.com`)
    command: ./objs/srs -c conf/docker.conf
    environment:
      CANDIDATE: "172.18.0.3"
    ports:
      - "8080:8080"
      - "1935:1935"
      - "1985:1985"
      - "8000:8000/udp"
    networks:
      - web

  postgres:
    image: postgres:12
    labels:
      - traefik.enable=false
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - "5432"
    networks:
      - internal

  graphql-engine:
    image: hasura/graphql-engine:v2.4.0
    labels:
      - traefik.http.routers.graphql.rule=Host(`graphql.flypov.com`)
      - traefik.http.routers.graphql.tls=true
      - traefik.http.routers.graphql.tls.certresolver=lets-encrypt
      - traefik.http.routers.graphql.middlewares=simpleAuth@file
      - traefik.port=8080
    ports:
      - "8080"
    depends_on:
      - "postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    networks:
      - web
      - internal

